
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `LessonProgress` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model LessonProgress
 * 
 */
export type LessonProgressModel = runtime.Types.Result.DefaultSelection<Prisma.$LessonProgressPayload>

export type AggregateLessonProgress = {
  _count: LessonProgressCountAggregateOutputType | null
  _min: LessonProgressMinAggregateOutputType | null
  _max: LessonProgressMaxAggregateOutputType | null
}

export type LessonProgressMinAggregateOutputType = {
  id: string | null
  completed: boolean | null
  userId: string | null
  lessonId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LessonProgressMaxAggregateOutputType = {
  id: string | null
  completed: boolean | null
  userId: string | null
  lessonId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type LessonProgressCountAggregateOutputType = {
  id: number
  completed: number
  userId: number
  lessonId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type LessonProgressMinAggregateInputType = {
  id?: true
  completed?: true
  userId?: true
  lessonId?: true
  createdAt?: true
  updatedAt?: true
}

export type LessonProgressMaxAggregateInputType = {
  id?: true
  completed?: true
  userId?: true
  lessonId?: true
  createdAt?: true
  updatedAt?: true
}

export type LessonProgressCountAggregateInputType = {
  id?: true
  completed?: true
  userId?: true
  lessonId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type LessonProgressAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LessonProgress to aggregate.
   */
  where?: Prisma.LessonProgressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LessonProgresses to fetch.
   */
  orderBy?: Prisma.LessonProgressOrderByWithRelationInput | Prisma.LessonProgressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.LessonProgressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LessonProgresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LessonProgresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned LessonProgresses
  **/
  _count?: true | LessonProgressCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LessonProgressMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LessonProgressMaxAggregateInputType
}

export type GetLessonProgressAggregateType<T extends LessonProgressAggregateArgs> = {
      [P in keyof T & keyof AggregateLessonProgress]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLessonProgress[P]>
    : Prisma.GetScalarType<T[P], AggregateLessonProgress[P]>
}




export type LessonProgressGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.LessonProgressWhereInput
  orderBy?: Prisma.LessonProgressOrderByWithAggregationInput | Prisma.LessonProgressOrderByWithAggregationInput[]
  by: Prisma.LessonProgressScalarFieldEnum[] | Prisma.LessonProgressScalarFieldEnum
  having?: Prisma.LessonProgressScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LessonProgressCountAggregateInputType | true
  _min?: LessonProgressMinAggregateInputType
  _max?: LessonProgressMaxAggregateInputType
}

export type LessonProgressGroupByOutputType = {
  id: string
  completed: boolean
  userId: string
  lessonId: string
  createdAt: Date
  updatedAt: Date
  _count: LessonProgressCountAggregateOutputType | null
  _min: LessonProgressMinAggregateOutputType | null
  _max: LessonProgressMaxAggregateOutputType | null
}

type GetLessonProgressGroupByPayload<T extends LessonProgressGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LessonProgressGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LessonProgressGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LessonProgressGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LessonProgressGroupByOutputType[P]>
      }
    >
  > 



export type LessonProgressWhereInput = {
  AND?: Prisma.LessonProgressWhereInput | Prisma.LessonProgressWhereInput[]
  OR?: Prisma.LessonProgressWhereInput[]
  NOT?: Prisma.LessonProgressWhereInput | Prisma.LessonProgressWhereInput[]
  id?: Prisma.StringFilter<"LessonProgress"> | string
  completed?: Prisma.BoolFilter<"LessonProgress"> | boolean
  userId?: Prisma.StringFilter<"LessonProgress"> | string
  lessonId?: Prisma.StringFilter<"LessonProgress"> | string
  createdAt?: Prisma.DateTimeFilter<"LessonProgress"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LessonProgress"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  lesson?: Prisma.XOR<Prisma.LessonScalarRelationFilter, Prisma.LessonWhereInput>
}

export type LessonProgressOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  completed?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  lesson?: Prisma.LessonOrderByWithRelationInput
}

export type LessonProgressWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_lessonId?: Prisma.LessonProgressUserIdLessonIdCompoundUniqueInput
  AND?: Prisma.LessonProgressWhereInput | Prisma.LessonProgressWhereInput[]
  OR?: Prisma.LessonProgressWhereInput[]
  NOT?: Prisma.LessonProgressWhereInput | Prisma.LessonProgressWhereInput[]
  completed?: Prisma.BoolFilter<"LessonProgress"> | boolean
  userId?: Prisma.StringFilter<"LessonProgress"> | string
  lessonId?: Prisma.StringFilter<"LessonProgress"> | string
  createdAt?: Prisma.DateTimeFilter<"LessonProgress"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LessonProgress"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  lesson?: Prisma.XOR<Prisma.LessonScalarRelationFilter, Prisma.LessonWhereInput>
}, "id" | "userId_lessonId">

export type LessonProgressOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  completed?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.LessonProgressCountOrderByAggregateInput
  _max?: Prisma.LessonProgressMaxOrderByAggregateInput
  _min?: Prisma.LessonProgressMinOrderByAggregateInput
}

export type LessonProgressScalarWhereWithAggregatesInput = {
  AND?: Prisma.LessonProgressScalarWhereWithAggregatesInput | Prisma.LessonProgressScalarWhereWithAggregatesInput[]
  OR?: Prisma.LessonProgressScalarWhereWithAggregatesInput[]
  NOT?: Prisma.LessonProgressScalarWhereWithAggregatesInput | Prisma.LessonProgressScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"LessonProgress"> | string
  completed?: Prisma.BoolWithAggregatesFilter<"LessonProgress"> | boolean
  userId?: Prisma.StringWithAggregatesFilter<"LessonProgress"> | string
  lessonId?: Prisma.StringWithAggregatesFilter<"LessonProgress"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"LessonProgress"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"LessonProgress"> | Date | string
}

export type LessonProgressCreateInput = {
  id?: string
  completed?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutLessonProgressInput
  lesson: Prisma.LessonCreateNestedOneWithoutLessonProgressInput
}

export type LessonProgressUncheckedCreateInput = {
  id?: string
  completed?: boolean
  userId: string
  lessonId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LessonProgressUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutLessonProgressNestedInput
  lesson?: Prisma.LessonUpdateOneRequiredWithoutLessonProgressNestedInput
}

export type LessonProgressUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  lessonId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LessonProgressCreateManyInput = {
  id?: string
  completed?: boolean
  userId: string
  lessonId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LessonProgressUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LessonProgressUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  lessonId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LessonProgressListRelationFilter = {
  every?: Prisma.LessonProgressWhereInput
  some?: Prisma.LessonProgressWhereInput
  none?: Prisma.LessonProgressWhereInput
}

export type LessonProgressOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LessonProgressUserIdLessonIdCompoundUniqueInput = {
  userId: string
  lessonId: string
}

export type LessonProgressCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  completed?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LessonProgressMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  completed?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LessonProgressMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  completed?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type LessonProgressCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.LessonProgressCreateWithoutUserInput, Prisma.LessonProgressUncheckedCreateWithoutUserInput> | Prisma.LessonProgressCreateWithoutUserInput[] | Prisma.LessonProgressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LessonProgressCreateOrConnectWithoutUserInput | Prisma.LessonProgressCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.LessonProgressCreateManyUserInputEnvelope
  connect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
}

export type LessonProgressUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.LessonProgressCreateWithoutUserInput, Prisma.LessonProgressUncheckedCreateWithoutUserInput> | Prisma.LessonProgressCreateWithoutUserInput[] | Prisma.LessonProgressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LessonProgressCreateOrConnectWithoutUserInput | Prisma.LessonProgressCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.LessonProgressCreateManyUserInputEnvelope
  connect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
}

export type LessonProgressUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.LessonProgressCreateWithoutUserInput, Prisma.LessonProgressUncheckedCreateWithoutUserInput> | Prisma.LessonProgressCreateWithoutUserInput[] | Prisma.LessonProgressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LessonProgressCreateOrConnectWithoutUserInput | Prisma.LessonProgressCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.LessonProgressUpsertWithWhereUniqueWithoutUserInput | Prisma.LessonProgressUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.LessonProgressCreateManyUserInputEnvelope
  set?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  disconnect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  delete?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  connect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  update?: Prisma.LessonProgressUpdateWithWhereUniqueWithoutUserInput | Prisma.LessonProgressUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.LessonProgressUpdateManyWithWhereWithoutUserInput | Prisma.LessonProgressUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.LessonProgressScalarWhereInput | Prisma.LessonProgressScalarWhereInput[]
}

export type LessonProgressUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.LessonProgressCreateWithoutUserInput, Prisma.LessonProgressUncheckedCreateWithoutUserInput> | Prisma.LessonProgressCreateWithoutUserInput[] | Prisma.LessonProgressUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.LessonProgressCreateOrConnectWithoutUserInput | Prisma.LessonProgressCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.LessonProgressUpsertWithWhereUniqueWithoutUserInput | Prisma.LessonProgressUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.LessonProgressCreateManyUserInputEnvelope
  set?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  disconnect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  delete?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  connect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  update?: Prisma.LessonProgressUpdateWithWhereUniqueWithoutUserInput | Prisma.LessonProgressUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.LessonProgressUpdateManyWithWhereWithoutUserInput | Prisma.LessonProgressUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.LessonProgressScalarWhereInput | Prisma.LessonProgressScalarWhereInput[]
}

export type LessonProgressCreateNestedManyWithoutLessonInput = {
  create?: Prisma.XOR<Prisma.LessonProgressCreateWithoutLessonInput, Prisma.LessonProgressUncheckedCreateWithoutLessonInput> | Prisma.LessonProgressCreateWithoutLessonInput[] | Prisma.LessonProgressUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.LessonProgressCreateOrConnectWithoutLessonInput | Prisma.LessonProgressCreateOrConnectWithoutLessonInput[]
  createMany?: Prisma.LessonProgressCreateManyLessonInputEnvelope
  connect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
}

export type LessonProgressUncheckedCreateNestedManyWithoutLessonInput = {
  create?: Prisma.XOR<Prisma.LessonProgressCreateWithoutLessonInput, Prisma.LessonProgressUncheckedCreateWithoutLessonInput> | Prisma.LessonProgressCreateWithoutLessonInput[] | Prisma.LessonProgressUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.LessonProgressCreateOrConnectWithoutLessonInput | Prisma.LessonProgressCreateOrConnectWithoutLessonInput[]
  createMany?: Prisma.LessonProgressCreateManyLessonInputEnvelope
  connect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
}

export type LessonProgressUpdateManyWithoutLessonNestedInput = {
  create?: Prisma.XOR<Prisma.LessonProgressCreateWithoutLessonInput, Prisma.LessonProgressUncheckedCreateWithoutLessonInput> | Prisma.LessonProgressCreateWithoutLessonInput[] | Prisma.LessonProgressUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.LessonProgressCreateOrConnectWithoutLessonInput | Prisma.LessonProgressCreateOrConnectWithoutLessonInput[]
  upsert?: Prisma.LessonProgressUpsertWithWhereUniqueWithoutLessonInput | Prisma.LessonProgressUpsertWithWhereUniqueWithoutLessonInput[]
  createMany?: Prisma.LessonProgressCreateManyLessonInputEnvelope
  set?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  disconnect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  delete?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  connect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  update?: Prisma.LessonProgressUpdateWithWhereUniqueWithoutLessonInput | Prisma.LessonProgressUpdateWithWhereUniqueWithoutLessonInput[]
  updateMany?: Prisma.LessonProgressUpdateManyWithWhereWithoutLessonInput | Prisma.LessonProgressUpdateManyWithWhereWithoutLessonInput[]
  deleteMany?: Prisma.LessonProgressScalarWhereInput | Prisma.LessonProgressScalarWhereInput[]
}

export type LessonProgressUncheckedUpdateManyWithoutLessonNestedInput = {
  create?: Prisma.XOR<Prisma.LessonProgressCreateWithoutLessonInput, Prisma.LessonProgressUncheckedCreateWithoutLessonInput> | Prisma.LessonProgressCreateWithoutLessonInput[] | Prisma.LessonProgressUncheckedCreateWithoutLessonInput[]
  connectOrCreate?: Prisma.LessonProgressCreateOrConnectWithoutLessonInput | Prisma.LessonProgressCreateOrConnectWithoutLessonInput[]
  upsert?: Prisma.LessonProgressUpsertWithWhereUniqueWithoutLessonInput | Prisma.LessonProgressUpsertWithWhereUniqueWithoutLessonInput[]
  createMany?: Prisma.LessonProgressCreateManyLessonInputEnvelope
  set?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  disconnect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  delete?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  connect?: Prisma.LessonProgressWhereUniqueInput | Prisma.LessonProgressWhereUniqueInput[]
  update?: Prisma.LessonProgressUpdateWithWhereUniqueWithoutLessonInput | Prisma.LessonProgressUpdateWithWhereUniqueWithoutLessonInput[]
  updateMany?: Prisma.LessonProgressUpdateManyWithWhereWithoutLessonInput | Prisma.LessonProgressUpdateManyWithWhereWithoutLessonInput[]
  deleteMany?: Prisma.LessonProgressScalarWhereInput | Prisma.LessonProgressScalarWhereInput[]
}

export type LessonProgressCreateWithoutUserInput = {
  id?: string
  completed?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  lesson: Prisma.LessonCreateNestedOneWithoutLessonProgressInput
}

export type LessonProgressUncheckedCreateWithoutUserInput = {
  id?: string
  completed?: boolean
  lessonId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LessonProgressCreateOrConnectWithoutUserInput = {
  where: Prisma.LessonProgressWhereUniqueInput
  create: Prisma.XOR<Prisma.LessonProgressCreateWithoutUserInput, Prisma.LessonProgressUncheckedCreateWithoutUserInput>
}

export type LessonProgressCreateManyUserInputEnvelope = {
  data: Prisma.LessonProgressCreateManyUserInput | Prisma.LessonProgressCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type LessonProgressUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.LessonProgressWhereUniqueInput
  update: Prisma.XOR<Prisma.LessonProgressUpdateWithoutUserInput, Prisma.LessonProgressUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.LessonProgressCreateWithoutUserInput, Prisma.LessonProgressUncheckedCreateWithoutUserInput>
}

export type LessonProgressUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.LessonProgressWhereUniqueInput
  data: Prisma.XOR<Prisma.LessonProgressUpdateWithoutUserInput, Prisma.LessonProgressUncheckedUpdateWithoutUserInput>
}

export type LessonProgressUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.LessonProgressScalarWhereInput
  data: Prisma.XOR<Prisma.LessonProgressUpdateManyMutationInput, Prisma.LessonProgressUncheckedUpdateManyWithoutUserInput>
}

export type LessonProgressScalarWhereInput = {
  AND?: Prisma.LessonProgressScalarWhereInput | Prisma.LessonProgressScalarWhereInput[]
  OR?: Prisma.LessonProgressScalarWhereInput[]
  NOT?: Prisma.LessonProgressScalarWhereInput | Prisma.LessonProgressScalarWhereInput[]
  id?: Prisma.StringFilter<"LessonProgress"> | string
  completed?: Prisma.BoolFilter<"LessonProgress"> | boolean
  userId?: Prisma.StringFilter<"LessonProgress"> | string
  lessonId?: Prisma.StringFilter<"LessonProgress"> | string
  createdAt?: Prisma.DateTimeFilter<"LessonProgress"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"LessonProgress"> | Date | string
}

export type LessonProgressCreateWithoutLessonInput = {
  id?: string
  completed?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutLessonProgressInput
}

export type LessonProgressUncheckedCreateWithoutLessonInput = {
  id?: string
  completed?: boolean
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LessonProgressCreateOrConnectWithoutLessonInput = {
  where: Prisma.LessonProgressWhereUniqueInput
  create: Prisma.XOR<Prisma.LessonProgressCreateWithoutLessonInput, Prisma.LessonProgressUncheckedCreateWithoutLessonInput>
}

export type LessonProgressCreateManyLessonInputEnvelope = {
  data: Prisma.LessonProgressCreateManyLessonInput | Prisma.LessonProgressCreateManyLessonInput[]
  skipDuplicates?: boolean
}

export type LessonProgressUpsertWithWhereUniqueWithoutLessonInput = {
  where: Prisma.LessonProgressWhereUniqueInput
  update: Prisma.XOR<Prisma.LessonProgressUpdateWithoutLessonInput, Prisma.LessonProgressUncheckedUpdateWithoutLessonInput>
  create: Prisma.XOR<Prisma.LessonProgressCreateWithoutLessonInput, Prisma.LessonProgressUncheckedCreateWithoutLessonInput>
}

export type LessonProgressUpdateWithWhereUniqueWithoutLessonInput = {
  where: Prisma.LessonProgressWhereUniqueInput
  data: Prisma.XOR<Prisma.LessonProgressUpdateWithoutLessonInput, Prisma.LessonProgressUncheckedUpdateWithoutLessonInput>
}

export type LessonProgressUpdateManyWithWhereWithoutLessonInput = {
  where: Prisma.LessonProgressScalarWhereInput
  data: Prisma.XOR<Prisma.LessonProgressUpdateManyMutationInput, Prisma.LessonProgressUncheckedUpdateManyWithoutLessonInput>
}

export type LessonProgressCreateManyUserInput = {
  id?: string
  completed?: boolean
  lessonId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LessonProgressUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lesson?: Prisma.LessonUpdateOneRequiredWithoutLessonProgressNestedInput
}

export type LessonProgressUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lessonId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LessonProgressUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  lessonId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LessonProgressCreateManyLessonInput = {
  id?: string
  completed?: boolean
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type LessonProgressUpdateWithoutLessonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutLessonProgressNestedInput
}

export type LessonProgressUncheckedUpdateWithoutLessonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type LessonProgressUncheckedUpdateManyWithoutLessonInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  completed?: Prisma.BoolFieldUpdateOperationsInput | boolean
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type LessonProgressSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  completed?: boolean
  userId?: boolean
  lessonId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["lessonProgress"]>

export type LessonProgressSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  completed?: boolean
  userId?: boolean
  lessonId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["lessonProgress"]>

export type LessonProgressSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  completed?: boolean
  userId?: boolean
  lessonId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["lessonProgress"]>

export type LessonProgressSelectScalar = {
  id?: boolean
  completed?: boolean
  userId?: boolean
  lessonId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type LessonProgressOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "completed" | "userId" | "lessonId" | "createdAt" | "updatedAt", ExtArgs["result"]["lessonProgress"]>
export type LessonProgressInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}
export type LessonProgressIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}
export type LessonProgressIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}

export type $LessonProgressPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "LessonProgress"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    lesson: Prisma.$LessonPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    completed: boolean
    userId: string
    lessonId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["lessonProgress"]>
  composites: {}
}

export type LessonProgressGetPayload<S extends boolean | null | undefined | LessonProgressDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload, S>

export type LessonProgressCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<LessonProgressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LessonProgressCountAggregateInputType | true
  }

export interface LessonProgressDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LessonProgress'], meta: { name: 'LessonProgress' } }
  /**
   * Find zero or one LessonProgress that matches the filter.
   * @param {LessonProgressFindUniqueArgs} args - Arguments to find a LessonProgress
   * @example
   * // Get one LessonProgress
   * const lessonProgress = await prisma.lessonProgress.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends LessonProgressFindUniqueArgs>(args: Prisma.SelectSubset<T, LessonProgressFindUniqueArgs<ExtArgs>>): Prisma.Prisma__LessonProgressClient<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one LessonProgress that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {LessonProgressFindUniqueOrThrowArgs} args - Arguments to find a LessonProgress
   * @example
   * // Get one LessonProgress
   * const lessonProgress = await prisma.lessonProgress.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends LessonProgressFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, LessonProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__LessonProgressClient<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LessonProgress that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LessonProgressFindFirstArgs} args - Arguments to find a LessonProgress
   * @example
   * // Get one LessonProgress
   * const lessonProgress = await prisma.lessonProgress.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends LessonProgressFindFirstArgs>(args?: Prisma.SelectSubset<T, LessonProgressFindFirstArgs<ExtArgs>>): Prisma.Prisma__LessonProgressClient<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first LessonProgress that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LessonProgressFindFirstOrThrowArgs} args - Arguments to find a LessonProgress
   * @example
   * // Get one LessonProgress
   * const lessonProgress = await prisma.lessonProgress.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends LessonProgressFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, LessonProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__LessonProgressClient<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more LessonProgresses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LessonProgressFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all LessonProgresses
   * const lessonProgresses = await prisma.lessonProgress.findMany()
   * 
   * // Get first 10 LessonProgresses
   * const lessonProgresses = await prisma.lessonProgress.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const lessonProgressWithIdOnly = await prisma.lessonProgress.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends LessonProgressFindManyArgs>(args?: Prisma.SelectSubset<T, LessonProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a LessonProgress.
   * @param {LessonProgressCreateArgs} args - Arguments to create a LessonProgress.
   * @example
   * // Create one LessonProgress
   * const LessonProgress = await prisma.lessonProgress.create({
   *   data: {
   *     // ... data to create a LessonProgress
   *   }
   * })
   * 
   */
  create<T extends LessonProgressCreateArgs>(args: Prisma.SelectSubset<T, LessonProgressCreateArgs<ExtArgs>>): Prisma.Prisma__LessonProgressClient<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many LessonProgresses.
   * @param {LessonProgressCreateManyArgs} args - Arguments to create many LessonProgresses.
   * @example
   * // Create many LessonProgresses
   * const lessonProgress = await prisma.lessonProgress.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends LessonProgressCreateManyArgs>(args?: Prisma.SelectSubset<T, LessonProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many LessonProgresses and returns the data saved in the database.
   * @param {LessonProgressCreateManyAndReturnArgs} args - Arguments to create many LessonProgresses.
   * @example
   * // Create many LessonProgresses
   * const lessonProgress = await prisma.lessonProgress.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many LessonProgresses and only return the `id`
   * const lessonProgressWithIdOnly = await prisma.lessonProgress.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends LessonProgressCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, LessonProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a LessonProgress.
   * @param {LessonProgressDeleteArgs} args - Arguments to delete one LessonProgress.
   * @example
   * // Delete one LessonProgress
   * const LessonProgress = await prisma.lessonProgress.delete({
   *   where: {
   *     // ... filter to delete one LessonProgress
   *   }
   * })
   * 
   */
  delete<T extends LessonProgressDeleteArgs>(args: Prisma.SelectSubset<T, LessonProgressDeleteArgs<ExtArgs>>): Prisma.Prisma__LessonProgressClient<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one LessonProgress.
   * @param {LessonProgressUpdateArgs} args - Arguments to update one LessonProgress.
   * @example
   * // Update one LessonProgress
   * const lessonProgress = await prisma.lessonProgress.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends LessonProgressUpdateArgs>(args: Prisma.SelectSubset<T, LessonProgressUpdateArgs<ExtArgs>>): Prisma.Prisma__LessonProgressClient<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more LessonProgresses.
   * @param {LessonProgressDeleteManyArgs} args - Arguments to filter LessonProgresses to delete.
   * @example
   * // Delete a few LessonProgresses
   * const { count } = await prisma.lessonProgress.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends LessonProgressDeleteManyArgs>(args?: Prisma.SelectSubset<T, LessonProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LessonProgresses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LessonProgressUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many LessonProgresses
   * const lessonProgress = await prisma.lessonProgress.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends LessonProgressUpdateManyArgs>(args: Prisma.SelectSubset<T, LessonProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more LessonProgresses and returns the data updated in the database.
   * @param {LessonProgressUpdateManyAndReturnArgs} args - Arguments to update many LessonProgresses.
   * @example
   * // Update many LessonProgresses
   * const lessonProgress = await prisma.lessonProgress.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more LessonProgresses and only return the `id`
   * const lessonProgressWithIdOnly = await prisma.lessonProgress.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends LessonProgressUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, LessonProgressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one LessonProgress.
   * @param {LessonProgressUpsertArgs} args - Arguments to update or create a LessonProgress.
   * @example
   * // Update or create a LessonProgress
   * const lessonProgress = await prisma.lessonProgress.upsert({
   *   create: {
   *     // ... data to create a LessonProgress
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the LessonProgress we want to update
   *   }
   * })
   */
  upsert<T extends LessonProgressUpsertArgs>(args: Prisma.SelectSubset<T, LessonProgressUpsertArgs<ExtArgs>>): Prisma.Prisma__LessonProgressClient<runtime.Types.Result.GetResult<Prisma.$LessonProgressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of LessonProgresses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LessonProgressCountArgs} args - Arguments to filter LessonProgresses to count.
   * @example
   * // Count the number of LessonProgresses
   * const count = await prisma.lessonProgress.count({
   *   where: {
   *     // ... the filter for the LessonProgresses we want to count
   *   }
   * })
  **/
  count<T extends LessonProgressCountArgs>(
    args?: Prisma.Subset<T, LessonProgressCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LessonProgressCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a LessonProgress.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LessonProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LessonProgressAggregateArgs>(args: Prisma.Subset<T, LessonProgressAggregateArgs>): Prisma.PrismaPromise<GetLessonProgressAggregateType<T>>

  /**
   * Group by LessonProgress.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LessonProgressGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends LessonProgressGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: LessonProgressGroupByArgs['orderBy'] }
      : { orderBy?: LessonProgressGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, LessonProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the LessonProgress model
 */
readonly fields: LessonProgressFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for LessonProgress.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__LessonProgressClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  lesson<T extends Prisma.LessonDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LessonDefaultArgs<ExtArgs>>): Prisma.Prisma__LessonClient<runtime.Types.Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the LessonProgress model
 */
export interface LessonProgressFieldRefs {
  readonly id: Prisma.FieldRef<"LessonProgress", 'String'>
  readonly completed: Prisma.FieldRef<"LessonProgress", 'Boolean'>
  readonly userId: Prisma.FieldRef<"LessonProgress", 'String'>
  readonly lessonId: Prisma.FieldRef<"LessonProgress", 'String'>
  readonly createdAt: Prisma.FieldRef<"LessonProgress", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"LessonProgress", 'DateTime'>
}
    

// Custom InputTypes
/**
 * LessonProgress findUnique
 */
export type LessonProgressFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressInclude<ExtArgs> | null
  /**
   * Filter, which LessonProgress to fetch.
   */
  where: Prisma.LessonProgressWhereUniqueInput
}

/**
 * LessonProgress findUniqueOrThrow
 */
export type LessonProgressFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressInclude<ExtArgs> | null
  /**
   * Filter, which LessonProgress to fetch.
   */
  where: Prisma.LessonProgressWhereUniqueInput
}

/**
 * LessonProgress findFirst
 */
export type LessonProgressFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressInclude<ExtArgs> | null
  /**
   * Filter, which LessonProgress to fetch.
   */
  where?: Prisma.LessonProgressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LessonProgresses to fetch.
   */
  orderBy?: Prisma.LessonProgressOrderByWithRelationInput | Prisma.LessonProgressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LessonProgresses.
   */
  cursor?: Prisma.LessonProgressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LessonProgresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LessonProgresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LessonProgresses.
   */
  distinct?: Prisma.LessonProgressScalarFieldEnum | Prisma.LessonProgressScalarFieldEnum[]
}

/**
 * LessonProgress findFirstOrThrow
 */
export type LessonProgressFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressInclude<ExtArgs> | null
  /**
   * Filter, which LessonProgress to fetch.
   */
  where?: Prisma.LessonProgressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LessonProgresses to fetch.
   */
  orderBy?: Prisma.LessonProgressOrderByWithRelationInput | Prisma.LessonProgressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for LessonProgresses.
   */
  cursor?: Prisma.LessonProgressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LessonProgresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LessonProgresses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of LessonProgresses.
   */
  distinct?: Prisma.LessonProgressScalarFieldEnum | Prisma.LessonProgressScalarFieldEnum[]
}

/**
 * LessonProgress findMany
 */
export type LessonProgressFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressInclude<ExtArgs> | null
  /**
   * Filter, which LessonProgresses to fetch.
   */
  where?: Prisma.LessonProgressWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of LessonProgresses to fetch.
   */
  orderBy?: Prisma.LessonProgressOrderByWithRelationInput | Prisma.LessonProgressOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing LessonProgresses.
   */
  cursor?: Prisma.LessonProgressWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` LessonProgresses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` LessonProgresses.
   */
  skip?: number
  distinct?: Prisma.LessonProgressScalarFieldEnum | Prisma.LessonProgressScalarFieldEnum[]
}

/**
 * LessonProgress create
 */
export type LessonProgressCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressInclude<ExtArgs> | null
  /**
   * The data needed to create a LessonProgress.
   */
  data: Prisma.XOR<Prisma.LessonProgressCreateInput, Prisma.LessonProgressUncheckedCreateInput>
}

/**
 * LessonProgress createMany
 */
export type LessonProgressCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many LessonProgresses.
   */
  data: Prisma.LessonProgressCreateManyInput | Prisma.LessonProgressCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * LessonProgress createManyAndReturn
 */
export type LessonProgressCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * The data used to create many LessonProgresses.
   */
  data: Prisma.LessonProgressCreateManyInput | Prisma.LessonProgressCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * LessonProgress update
 */
export type LessonProgressUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressInclude<ExtArgs> | null
  /**
   * The data needed to update a LessonProgress.
   */
  data: Prisma.XOR<Prisma.LessonProgressUpdateInput, Prisma.LessonProgressUncheckedUpdateInput>
  /**
   * Choose, which LessonProgress to update.
   */
  where: Prisma.LessonProgressWhereUniqueInput
}

/**
 * LessonProgress updateMany
 */
export type LessonProgressUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update LessonProgresses.
   */
  data: Prisma.XOR<Prisma.LessonProgressUpdateManyMutationInput, Prisma.LessonProgressUncheckedUpdateManyInput>
  /**
   * Filter which LessonProgresses to update
   */
  where?: Prisma.LessonProgressWhereInput
  /**
   * Limit how many LessonProgresses to update.
   */
  limit?: number
}

/**
 * LessonProgress updateManyAndReturn
 */
export type LessonProgressUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * The data used to update LessonProgresses.
   */
  data: Prisma.XOR<Prisma.LessonProgressUpdateManyMutationInput, Prisma.LessonProgressUncheckedUpdateManyInput>
  /**
   * Filter which LessonProgresses to update
   */
  where?: Prisma.LessonProgressWhereInput
  /**
   * Limit how many LessonProgresses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * LessonProgress upsert
 */
export type LessonProgressUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressInclude<ExtArgs> | null
  /**
   * The filter to search for the LessonProgress to update in case it exists.
   */
  where: Prisma.LessonProgressWhereUniqueInput
  /**
   * In case the LessonProgress found by the `where` argument doesn't exist, create a new LessonProgress with this data.
   */
  create: Prisma.XOR<Prisma.LessonProgressCreateInput, Prisma.LessonProgressUncheckedCreateInput>
  /**
   * In case the LessonProgress was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.LessonProgressUpdateInput, Prisma.LessonProgressUncheckedUpdateInput>
}

/**
 * LessonProgress delete
 */
export type LessonProgressDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressInclude<ExtArgs> | null
  /**
   * Filter which LessonProgress to delete.
   */
  where: Prisma.LessonProgressWhereUniqueInput
}

/**
 * LessonProgress deleteMany
 */
export type LessonProgressDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which LessonProgresses to delete
   */
  where?: Prisma.LessonProgressWhereInput
  /**
   * Limit how many LessonProgresses to delete.
   */
  limit?: number
}

/**
 * LessonProgress without action
 */
export type LessonProgressDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LessonProgress
   */
  select?: Prisma.LessonProgressSelect<ExtArgs> | null
  /**
   * Omit specific fields from the LessonProgress
   */
  omit?: Prisma.LessonProgressOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LessonProgressInclude<ExtArgs> | null
}
