
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Course` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Course
 * 
 */
export type CourseModel = runtime.Types.Result.DefaultSelection<Prisma.$CoursePayload>

export type AggregateCourse = {
  _count: CourseCountAggregateOutputType | null
  _avg: CourseAvgAggregateOutputType | null
  _sum: CourseSumAggregateOutputType | null
  _min: CourseMinAggregateOutputType | null
  _max: CourseMaxAggregateOutputType | null
}

export type CourseAvgAggregateOutputType = {
  price: number | null
  duration: number | null
}

export type CourseSumAggregateOutputType = {
  price: number | null
  duration: number | null
}

export type CourseMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  fileKey: string | null
  price: number | null
  duration: number | null
  level: $Enums.CourseLevel | null
  smallDescription: string | null
  slug: string | null
  status: $Enums.CourseStatus | null
  category: string | null
  userId: string | null
  stripePriceId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CourseMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  fileKey: string | null
  price: number | null
  duration: number | null
  level: $Enums.CourseLevel | null
  smallDescription: string | null
  slug: string | null
  status: $Enums.CourseStatus | null
  category: string | null
  userId: string | null
  stripePriceId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type CourseCountAggregateOutputType = {
  id: number
  title: number
  description: number
  fileKey: number
  price: number
  duration: number
  level: number
  smallDescription: number
  slug: number
  status: number
  category: number
  userId: number
  stripePriceId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type CourseAvgAggregateInputType = {
  price?: true
  duration?: true
}

export type CourseSumAggregateInputType = {
  price?: true
  duration?: true
}

export type CourseMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  fileKey?: true
  price?: true
  duration?: true
  level?: true
  smallDescription?: true
  slug?: true
  status?: true
  category?: true
  userId?: true
  stripePriceId?: true
  createdAt?: true
  updatedAt?: true
}

export type CourseMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  fileKey?: true
  price?: true
  duration?: true
  level?: true
  smallDescription?: true
  slug?: true
  status?: true
  category?: true
  userId?: true
  stripePriceId?: true
  createdAt?: true
  updatedAt?: true
}

export type CourseCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  fileKey?: true
  price?: true
  duration?: true
  level?: true
  smallDescription?: true
  slug?: true
  status?: true
  category?: true
  userId?: true
  stripePriceId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type CourseAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Course to aggregate.
   */
  where?: Prisma.CourseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Courses to fetch.
   */
  orderBy?: Prisma.CourseOrderByWithRelationInput | Prisma.CourseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CourseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Courses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Courses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Courses
  **/
  _count?: true | CourseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CourseAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CourseSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CourseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CourseMaxAggregateInputType
}

export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
      [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCourse[P]>
    : Prisma.GetScalarType<T[P], AggregateCourse[P]>
}




export type CourseGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CourseWhereInput
  orderBy?: Prisma.CourseOrderByWithAggregationInput | Prisma.CourseOrderByWithAggregationInput[]
  by: Prisma.CourseScalarFieldEnum[] | Prisma.CourseScalarFieldEnum
  having?: Prisma.CourseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CourseCountAggregateInputType | true
  _avg?: CourseAvgAggregateInputType
  _sum?: CourseSumAggregateInputType
  _min?: CourseMinAggregateInputType
  _max?: CourseMaxAggregateInputType
}

export type CourseGroupByOutputType = {
  id: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status: $Enums.CourseStatus
  category: string
  userId: string
  stripePriceId: string
  createdAt: Date
  updatedAt: Date
  _count: CourseCountAggregateOutputType | null
  _avg: CourseAvgAggregateOutputType | null
  _sum: CourseSumAggregateOutputType | null
  _min: CourseMinAggregateOutputType | null
  _max: CourseMaxAggregateOutputType | null
}

type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CourseGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CourseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CourseGroupByOutputType[P]>
      }
    >
  > 



export type CourseWhereInput = {
  AND?: Prisma.CourseWhereInput | Prisma.CourseWhereInput[]
  OR?: Prisma.CourseWhereInput[]
  NOT?: Prisma.CourseWhereInput | Prisma.CourseWhereInput[]
  id?: Prisma.StringFilter<"Course"> | string
  title?: Prisma.StringFilter<"Course"> | string
  description?: Prisma.StringFilter<"Course"> | string
  fileKey?: Prisma.StringFilter<"Course"> | string
  price?: Prisma.IntFilter<"Course"> | number
  duration?: Prisma.IntFilter<"Course"> | number
  level?: Prisma.EnumCourseLevelFilter<"Course"> | $Enums.CourseLevel
  smallDescription?: Prisma.StringFilter<"Course"> | string
  slug?: Prisma.StringFilter<"Course"> | string
  status?: Prisma.EnumCourseStatusFilter<"Course"> | $Enums.CourseStatus
  category?: Prisma.StringFilter<"Course"> | string
  userId?: Prisma.StringFilter<"Course"> | string
  stripePriceId?: Prisma.StringFilter<"Course"> | string
  createdAt?: Prisma.DateTimeFilter<"Course"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Course"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  chapters?: Prisma.ChapterListRelationFilter
  enrollments?: Prisma.EnrollmentListRelationFilter
}

export type CourseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  fileKey?: Prisma.SortOrder
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  level?: Prisma.SortOrder
  smallDescription?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  status?: Prisma.SortOrder
  category?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  stripePriceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  chapters?: Prisma.ChapterOrderByRelationAggregateInput
  enrollments?: Prisma.EnrollmentOrderByRelationAggregateInput
}

export type CourseWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  slug?: string
  stripePriceId?: string
  AND?: Prisma.CourseWhereInput | Prisma.CourseWhereInput[]
  OR?: Prisma.CourseWhereInput[]
  NOT?: Prisma.CourseWhereInput | Prisma.CourseWhereInput[]
  title?: Prisma.StringFilter<"Course"> | string
  description?: Prisma.StringFilter<"Course"> | string
  fileKey?: Prisma.StringFilter<"Course"> | string
  price?: Prisma.IntFilter<"Course"> | number
  duration?: Prisma.IntFilter<"Course"> | number
  level?: Prisma.EnumCourseLevelFilter<"Course"> | $Enums.CourseLevel
  smallDescription?: Prisma.StringFilter<"Course"> | string
  status?: Prisma.EnumCourseStatusFilter<"Course"> | $Enums.CourseStatus
  category?: Prisma.StringFilter<"Course"> | string
  userId?: Prisma.StringFilter<"Course"> | string
  createdAt?: Prisma.DateTimeFilter<"Course"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Course"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  chapters?: Prisma.ChapterListRelationFilter
  enrollments?: Prisma.EnrollmentListRelationFilter
}, "id" | "slug" | "stripePriceId">

export type CourseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  fileKey?: Prisma.SortOrder
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  level?: Prisma.SortOrder
  smallDescription?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  status?: Prisma.SortOrder
  category?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  stripePriceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.CourseCountOrderByAggregateInput
  _avg?: Prisma.CourseAvgOrderByAggregateInput
  _max?: Prisma.CourseMaxOrderByAggregateInput
  _min?: Prisma.CourseMinOrderByAggregateInput
  _sum?: Prisma.CourseSumOrderByAggregateInput
}

export type CourseScalarWhereWithAggregatesInput = {
  AND?: Prisma.CourseScalarWhereWithAggregatesInput | Prisma.CourseScalarWhereWithAggregatesInput[]
  OR?: Prisma.CourseScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CourseScalarWhereWithAggregatesInput | Prisma.CourseScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Course"> | string
  title?: Prisma.StringWithAggregatesFilter<"Course"> | string
  description?: Prisma.StringWithAggregatesFilter<"Course"> | string
  fileKey?: Prisma.StringWithAggregatesFilter<"Course"> | string
  price?: Prisma.IntWithAggregatesFilter<"Course"> | number
  duration?: Prisma.IntWithAggregatesFilter<"Course"> | number
  level?: Prisma.EnumCourseLevelWithAggregatesFilter<"Course"> | $Enums.CourseLevel
  smallDescription?: Prisma.StringWithAggregatesFilter<"Course"> | string
  slug?: Prisma.StringWithAggregatesFilter<"Course"> | string
  status?: Prisma.EnumCourseStatusWithAggregatesFilter<"Course"> | $Enums.CourseStatus
  category?: Prisma.StringWithAggregatesFilter<"Course"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Course"> | string
  stripePriceId?: Prisma.StringWithAggregatesFilter<"Course"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Course"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Course"> | Date | string
}

export type CourseCreateInput = {
  id?: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level?: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status?: $Enums.CourseStatus
  category: string
  stripePriceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCoursesInput
  chapters?: Prisma.ChapterCreateNestedManyWithoutCourseInput
  enrollments?: Prisma.EnrollmentCreateNestedManyWithoutCourseInput
}

export type CourseUncheckedCreateInput = {
  id?: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level?: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status?: $Enums.CourseStatus
  category: string
  userId: string
  stripePriceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  chapters?: Prisma.ChapterUncheckedCreateNestedManyWithoutCourseInput
  enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutCourseInput
}

export type CourseUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCoursesNestedInput
  chapters?: Prisma.ChapterUpdateManyWithoutCourseNestedInput
  enrollments?: Prisma.EnrollmentUpdateManyWithoutCourseNestedInput
}

export type CourseUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chapters?: Prisma.ChapterUncheckedUpdateManyWithoutCourseNestedInput
  enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
}

export type CourseCreateManyInput = {
  id?: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level?: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status?: $Enums.CourseStatus
  category: string
  userId: string
  stripePriceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CourseUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CourseListRelationFilter = {
  every?: Prisma.CourseWhereInput
  some?: Prisma.CourseWhereInput
  none?: Prisma.CourseWhereInput
}

export type CourseOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type CourseScalarRelationFilter = {
  is?: Prisma.CourseWhereInput
  isNot?: Prisma.CourseWhereInput
}

export type CourseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  fileKey?: Prisma.SortOrder
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  level?: Prisma.SortOrder
  smallDescription?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  status?: Prisma.SortOrder
  category?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  stripePriceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CourseAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type CourseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  fileKey?: Prisma.SortOrder
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  level?: Prisma.SortOrder
  smallDescription?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  status?: Prisma.SortOrder
  category?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  stripePriceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CourseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  fileKey?: Prisma.SortOrder
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  level?: Prisma.SortOrder
  smallDescription?: Prisma.SortOrder
  slug?: Prisma.SortOrder
  status?: Prisma.SortOrder
  category?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  stripePriceId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type CourseSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type CourseCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CourseCreateWithoutUserInput, Prisma.CourseUncheckedCreateWithoutUserInput> | Prisma.CourseCreateWithoutUserInput[] | Prisma.CourseUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CourseCreateOrConnectWithoutUserInput | Prisma.CourseCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CourseCreateManyUserInputEnvelope
  connect?: Prisma.CourseWhereUniqueInput | Prisma.CourseWhereUniqueInput[]
}

export type CourseUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.CourseCreateWithoutUserInput, Prisma.CourseUncheckedCreateWithoutUserInput> | Prisma.CourseCreateWithoutUserInput[] | Prisma.CourseUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CourseCreateOrConnectWithoutUserInput | Prisma.CourseCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.CourseCreateManyUserInputEnvelope
  connect?: Prisma.CourseWhereUniqueInput | Prisma.CourseWhereUniqueInput[]
}

export type CourseUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CourseCreateWithoutUserInput, Prisma.CourseUncheckedCreateWithoutUserInput> | Prisma.CourseCreateWithoutUserInput[] | Prisma.CourseUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CourseCreateOrConnectWithoutUserInput | Prisma.CourseCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CourseUpsertWithWhereUniqueWithoutUserInput | Prisma.CourseUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CourseCreateManyUserInputEnvelope
  set?: Prisma.CourseWhereUniqueInput | Prisma.CourseWhereUniqueInput[]
  disconnect?: Prisma.CourseWhereUniqueInput | Prisma.CourseWhereUniqueInput[]
  delete?: Prisma.CourseWhereUniqueInput | Prisma.CourseWhereUniqueInput[]
  connect?: Prisma.CourseWhereUniqueInput | Prisma.CourseWhereUniqueInput[]
  update?: Prisma.CourseUpdateWithWhereUniqueWithoutUserInput | Prisma.CourseUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CourseUpdateManyWithWhereWithoutUserInput | Prisma.CourseUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CourseScalarWhereInput | Prisma.CourseScalarWhereInput[]
}

export type CourseUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.CourseCreateWithoutUserInput, Prisma.CourseUncheckedCreateWithoutUserInput> | Prisma.CourseCreateWithoutUserInput[] | Prisma.CourseUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.CourseCreateOrConnectWithoutUserInput | Prisma.CourseCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.CourseUpsertWithWhereUniqueWithoutUserInput | Prisma.CourseUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.CourseCreateManyUserInputEnvelope
  set?: Prisma.CourseWhereUniqueInput | Prisma.CourseWhereUniqueInput[]
  disconnect?: Prisma.CourseWhereUniqueInput | Prisma.CourseWhereUniqueInput[]
  delete?: Prisma.CourseWhereUniqueInput | Prisma.CourseWhereUniqueInput[]
  connect?: Prisma.CourseWhereUniqueInput | Prisma.CourseWhereUniqueInput[]
  update?: Prisma.CourseUpdateWithWhereUniqueWithoutUserInput | Prisma.CourseUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.CourseUpdateManyWithWhereWithoutUserInput | Prisma.CourseUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.CourseScalarWhereInput | Prisma.CourseScalarWhereInput[]
}

export type CourseCreateNestedOneWithoutChaptersInput = {
  create?: Prisma.XOR<Prisma.CourseCreateWithoutChaptersInput, Prisma.CourseUncheckedCreateWithoutChaptersInput>
  connectOrCreate?: Prisma.CourseCreateOrConnectWithoutChaptersInput
  connect?: Prisma.CourseWhereUniqueInput
}

export type CourseUpdateOneRequiredWithoutChaptersNestedInput = {
  create?: Prisma.XOR<Prisma.CourseCreateWithoutChaptersInput, Prisma.CourseUncheckedCreateWithoutChaptersInput>
  connectOrCreate?: Prisma.CourseCreateOrConnectWithoutChaptersInput
  upsert?: Prisma.CourseUpsertWithoutChaptersInput
  connect?: Prisma.CourseWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CourseUpdateToOneWithWhereWithoutChaptersInput, Prisma.CourseUpdateWithoutChaptersInput>, Prisma.CourseUncheckedUpdateWithoutChaptersInput>
}

export type EnumCourseLevelFieldUpdateOperationsInput = {
  set?: $Enums.CourseLevel
}

export type EnumCourseStatusFieldUpdateOperationsInput = {
  set?: $Enums.CourseStatus
}

export type CourseCreateNestedOneWithoutEnrollmentsInput = {
  create?: Prisma.XOR<Prisma.CourseCreateWithoutEnrollmentsInput, Prisma.CourseUncheckedCreateWithoutEnrollmentsInput>
  connectOrCreate?: Prisma.CourseCreateOrConnectWithoutEnrollmentsInput
  connect?: Prisma.CourseWhereUniqueInput
}

export type CourseUpdateOneRequiredWithoutEnrollmentsNestedInput = {
  create?: Prisma.XOR<Prisma.CourseCreateWithoutEnrollmentsInput, Prisma.CourseUncheckedCreateWithoutEnrollmentsInput>
  connectOrCreate?: Prisma.CourseCreateOrConnectWithoutEnrollmentsInput
  upsert?: Prisma.CourseUpsertWithoutEnrollmentsInput
  connect?: Prisma.CourseWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.CourseUpdateToOneWithWhereWithoutEnrollmentsInput, Prisma.CourseUpdateWithoutEnrollmentsInput>, Prisma.CourseUncheckedUpdateWithoutEnrollmentsInput>
}

export type CourseCreateWithoutUserInput = {
  id?: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level?: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status?: $Enums.CourseStatus
  category: string
  stripePriceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  chapters?: Prisma.ChapterCreateNestedManyWithoutCourseInput
  enrollments?: Prisma.EnrollmentCreateNestedManyWithoutCourseInput
}

export type CourseUncheckedCreateWithoutUserInput = {
  id?: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level?: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status?: $Enums.CourseStatus
  category: string
  stripePriceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  chapters?: Prisma.ChapterUncheckedCreateNestedManyWithoutCourseInput
  enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutCourseInput
}

export type CourseCreateOrConnectWithoutUserInput = {
  where: Prisma.CourseWhereUniqueInput
  create: Prisma.XOR<Prisma.CourseCreateWithoutUserInput, Prisma.CourseUncheckedCreateWithoutUserInput>
}

export type CourseCreateManyUserInputEnvelope = {
  data: Prisma.CourseCreateManyUserInput | Prisma.CourseCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type CourseUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.CourseWhereUniqueInput
  update: Prisma.XOR<Prisma.CourseUpdateWithoutUserInput, Prisma.CourseUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.CourseCreateWithoutUserInput, Prisma.CourseUncheckedCreateWithoutUserInput>
}

export type CourseUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.CourseWhereUniqueInput
  data: Prisma.XOR<Prisma.CourseUpdateWithoutUserInput, Prisma.CourseUncheckedUpdateWithoutUserInput>
}

export type CourseUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.CourseScalarWhereInput
  data: Prisma.XOR<Prisma.CourseUpdateManyMutationInput, Prisma.CourseUncheckedUpdateManyWithoutUserInput>
}

export type CourseScalarWhereInput = {
  AND?: Prisma.CourseScalarWhereInput | Prisma.CourseScalarWhereInput[]
  OR?: Prisma.CourseScalarWhereInput[]
  NOT?: Prisma.CourseScalarWhereInput | Prisma.CourseScalarWhereInput[]
  id?: Prisma.StringFilter<"Course"> | string
  title?: Prisma.StringFilter<"Course"> | string
  description?: Prisma.StringFilter<"Course"> | string
  fileKey?: Prisma.StringFilter<"Course"> | string
  price?: Prisma.IntFilter<"Course"> | number
  duration?: Prisma.IntFilter<"Course"> | number
  level?: Prisma.EnumCourseLevelFilter<"Course"> | $Enums.CourseLevel
  smallDescription?: Prisma.StringFilter<"Course"> | string
  slug?: Prisma.StringFilter<"Course"> | string
  status?: Prisma.EnumCourseStatusFilter<"Course"> | $Enums.CourseStatus
  category?: Prisma.StringFilter<"Course"> | string
  userId?: Prisma.StringFilter<"Course"> | string
  stripePriceId?: Prisma.StringFilter<"Course"> | string
  createdAt?: Prisma.DateTimeFilter<"Course"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Course"> | Date | string
}

export type CourseCreateWithoutChaptersInput = {
  id?: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level?: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status?: $Enums.CourseStatus
  category: string
  stripePriceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCoursesInput
  enrollments?: Prisma.EnrollmentCreateNestedManyWithoutCourseInput
}

export type CourseUncheckedCreateWithoutChaptersInput = {
  id?: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level?: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status?: $Enums.CourseStatus
  category: string
  userId: string
  stripePriceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  enrollments?: Prisma.EnrollmentUncheckedCreateNestedManyWithoutCourseInput
}

export type CourseCreateOrConnectWithoutChaptersInput = {
  where: Prisma.CourseWhereUniqueInput
  create: Prisma.XOR<Prisma.CourseCreateWithoutChaptersInput, Prisma.CourseUncheckedCreateWithoutChaptersInput>
}

export type CourseUpsertWithoutChaptersInput = {
  update: Prisma.XOR<Prisma.CourseUpdateWithoutChaptersInput, Prisma.CourseUncheckedUpdateWithoutChaptersInput>
  create: Prisma.XOR<Prisma.CourseCreateWithoutChaptersInput, Prisma.CourseUncheckedCreateWithoutChaptersInput>
  where?: Prisma.CourseWhereInput
}

export type CourseUpdateToOneWithWhereWithoutChaptersInput = {
  where?: Prisma.CourseWhereInput
  data: Prisma.XOR<Prisma.CourseUpdateWithoutChaptersInput, Prisma.CourseUncheckedUpdateWithoutChaptersInput>
}

export type CourseUpdateWithoutChaptersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCoursesNestedInput
  enrollments?: Prisma.EnrollmentUpdateManyWithoutCourseNestedInput
}

export type CourseUncheckedUpdateWithoutChaptersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
}

export type CourseCreateWithoutEnrollmentsInput = {
  id?: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level?: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status?: $Enums.CourseStatus
  category: string
  stripePriceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutCoursesInput
  chapters?: Prisma.ChapterCreateNestedManyWithoutCourseInput
}

export type CourseUncheckedCreateWithoutEnrollmentsInput = {
  id?: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level?: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status?: $Enums.CourseStatus
  category: string
  userId: string
  stripePriceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  chapters?: Prisma.ChapterUncheckedCreateNestedManyWithoutCourseInput
}

export type CourseCreateOrConnectWithoutEnrollmentsInput = {
  where: Prisma.CourseWhereUniqueInput
  create: Prisma.XOR<Prisma.CourseCreateWithoutEnrollmentsInput, Prisma.CourseUncheckedCreateWithoutEnrollmentsInput>
}

export type CourseUpsertWithoutEnrollmentsInput = {
  update: Prisma.XOR<Prisma.CourseUpdateWithoutEnrollmentsInput, Prisma.CourseUncheckedUpdateWithoutEnrollmentsInput>
  create: Prisma.XOR<Prisma.CourseCreateWithoutEnrollmentsInput, Prisma.CourseUncheckedCreateWithoutEnrollmentsInput>
  where?: Prisma.CourseWhereInput
}

export type CourseUpdateToOneWithWhereWithoutEnrollmentsInput = {
  where?: Prisma.CourseWhereInput
  data: Prisma.XOR<Prisma.CourseUpdateWithoutEnrollmentsInput, Prisma.CourseUncheckedUpdateWithoutEnrollmentsInput>
}

export type CourseUpdateWithoutEnrollmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutCoursesNestedInput
  chapters?: Prisma.ChapterUpdateManyWithoutCourseNestedInput
}

export type CourseUncheckedUpdateWithoutEnrollmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chapters?: Prisma.ChapterUncheckedUpdateManyWithoutCourseNestedInput
}

export type CourseCreateManyUserInput = {
  id?: string
  title: string
  description: string
  fileKey: string
  price: number
  duration: number
  level?: $Enums.CourseLevel
  smallDescription: string
  slug: string
  status?: $Enums.CourseStatus
  category: string
  stripePriceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type CourseUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chapters?: Prisma.ChapterUpdateManyWithoutCourseNestedInput
  enrollments?: Prisma.EnrollmentUpdateManyWithoutCourseNestedInput
}

export type CourseUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  chapters?: Prisma.ChapterUncheckedUpdateManyWithoutCourseNestedInput
  enrollments?: Prisma.EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
}

export type CourseUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  fileKey?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  level?: Prisma.EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
  smallDescription?: Prisma.StringFieldUpdateOperationsInput | string
  slug?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
  category?: Prisma.StringFieldUpdateOperationsInput | string
  stripePriceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type CourseCountOutputType
 */

export type CourseCountOutputType = {
  chapters: number
  enrollments: number
}

export type CourseCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  chapters?: boolean | CourseCountOutputTypeCountChaptersArgs
  enrollments?: boolean | CourseCountOutputTypeCountEnrollmentsArgs
}

/**
 * CourseCountOutputType without action
 */
export type CourseCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CourseCountOutputType
   */
  select?: Prisma.CourseCountOutputTypeSelect<ExtArgs> | null
}

/**
 * CourseCountOutputType without action
 */
export type CourseCountOutputTypeCountChaptersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChapterWhereInput
}

/**
 * CourseCountOutputType without action
 */
export type CourseCountOutputTypeCountEnrollmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EnrollmentWhereInput
}


export type CourseSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  fileKey?: boolean
  price?: boolean
  duration?: boolean
  level?: boolean
  smallDescription?: boolean
  slug?: boolean
  status?: boolean
  category?: boolean
  userId?: boolean
  stripePriceId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chapters?: boolean | Prisma.Course$chaptersArgs<ExtArgs>
  enrollments?: boolean | Prisma.Course$enrollmentsArgs<ExtArgs>
  _count?: boolean | Prisma.CourseCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["course"]>

export type CourseSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  fileKey?: boolean
  price?: boolean
  duration?: boolean
  level?: boolean
  smallDescription?: boolean
  slug?: boolean
  status?: boolean
  category?: boolean
  userId?: boolean
  stripePriceId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["course"]>

export type CourseSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  fileKey?: boolean
  price?: boolean
  duration?: boolean
  level?: boolean
  smallDescription?: boolean
  slug?: boolean
  status?: boolean
  category?: boolean
  userId?: boolean
  stripePriceId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["course"]>

export type CourseSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  fileKey?: boolean
  price?: boolean
  duration?: boolean
  level?: boolean
  smallDescription?: boolean
  slug?: boolean
  status?: boolean
  category?: boolean
  userId?: boolean
  stripePriceId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type CourseOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "fileKey" | "price" | "duration" | "level" | "smallDescription" | "slug" | "status" | "category" | "userId" | "stripePriceId" | "createdAt" | "updatedAt", ExtArgs["result"]["course"]>
export type CourseInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  chapters?: boolean | Prisma.Course$chaptersArgs<ExtArgs>
  enrollments?: boolean | Prisma.Course$enrollmentsArgs<ExtArgs>
  _count?: boolean | Prisma.CourseCountOutputTypeDefaultArgs<ExtArgs>
}
export type CourseIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type CourseIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $CoursePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Course"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    chapters: Prisma.$ChapterPayload<ExtArgs>[]
    enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string
    fileKey: string
    price: number
    duration: number
    level: $Enums.CourseLevel
    smallDescription: string
    slug: string
    status: $Enums.CourseStatus
    category: string
    userId: string
    stripePriceId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["course"]>
  composites: {}
}

export type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CoursePayload, S>

export type CourseCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CourseCountAggregateInputType | true
  }

export interface CourseDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
  /**
   * Find zero or one Course that matches the filter.
   * @param {CourseFindUniqueArgs} args - Arguments to find a Course
   * @example
   * // Get one Course
   * const course = await prisma.course.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CourseFindUniqueArgs>(args: Prisma.SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Course that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
   * @example
   * // Get one Course
   * const course = await prisma.course.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Course that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseFindFirstArgs} args - Arguments to find a Course
   * @example
   * // Get one Course
   * const course = await prisma.course.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CourseFindFirstArgs>(args?: Prisma.SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Course that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
   * @example
   * // Get one Course
   * const course = await prisma.course.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Courses that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Courses
   * const courses = await prisma.course.findMany()
   * 
   * // Get first 10 Courses
   * const courses = await prisma.course.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CourseFindManyArgs>(args?: Prisma.SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Course.
   * @param {CourseCreateArgs} args - Arguments to create a Course.
   * @example
   * // Create one Course
   * const Course = await prisma.course.create({
   *   data: {
   *     // ... data to create a Course
   *   }
   * })
   * 
   */
  create<T extends CourseCreateArgs>(args: Prisma.SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Courses.
   * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
   * @example
   * // Create many Courses
   * const course = await prisma.course.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CourseCreateManyArgs>(args?: Prisma.SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Courses and returns the data saved in the database.
   * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
   * @example
   * // Create many Courses
   * const course = await prisma.course.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Courses and only return the `id`
   * const courseWithIdOnly = await prisma.course.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Course.
   * @param {CourseDeleteArgs} args - Arguments to delete one Course.
   * @example
   * // Delete one Course
   * const Course = await prisma.course.delete({
   *   where: {
   *     // ... filter to delete one Course
   *   }
   * })
   * 
   */
  delete<T extends CourseDeleteArgs>(args: Prisma.SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Course.
   * @param {CourseUpdateArgs} args - Arguments to update one Course.
   * @example
   * // Update one Course
   * const course = await prisma.course.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CourseUpdateArgs>(args: Prisma.SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Courses.
   * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
   * @example
   * // Delete a few Courses
   * const { count } = await prisma.course.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CourseDeleteManyArgs>(args?: Prisma.SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Courses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Courses
   * const course = await prisma.course.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CourseUpdateManyArgs>(args: Prisma.SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Courses and returns the data updated in the database.
   * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
   * @example
   * // Update many Courses
   * const course = await prisma.course.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Courses and only return the `id`
   * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Course.
   * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
   * @example
   * // Update or create a Course
   * const course = await prisma.course.upsert({
   *   create: {
   *     // ... data to create a Course
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Course we want to update
   *   }
   * })
   */
  upsert<T extends CourseUpsertArgs>(args: Prisma.SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma.Prisma__CourseClient<runtime.Types.Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Courses.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseCountArgs} args - Arguments to filter Courses to count.
   * @example
   * // Count the number of Courses
   * const count = await prisma.course.count({
   *   where: {
   *     // ... the filter for the Courses we want to count
   *   }
   * })
  **/
  count<T extends CourseCountArgs>(
    args?: Prisma.Subset<T, CourseCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CourseCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Course.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CourseAggregateArgs>(args: Prisma.Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

  /**
   * Group by Course.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CourseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CourseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CourseGroupByArgs['orderBy'] }
      : { orderBy?: CourseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Course model
 */
readonly fields: CourseFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Course.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CourseClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  chapters<T extends Prisma.Course$chaptersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Course$chaptersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  enrollments<T extends Prisma.Course$enrollmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Course$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Course model
 */
export interface CourseFieldRefs {
  readonly id: Prisma.FieldRef<"Course", 'String'>
  readonly title: Prisma.FieldRef<"Course", 'String'>
  readonly description: Prisma.FieldRef<"Course", 'String'>
  readonly fileKey: Prisma.FieldRef<"Course", 'String'>
  readonly price: Prisma.FieldRef<"Course", 'Int'>
  readonly duration: Prisma.FieldRef<"Course", 'Int'>
  readonly level: Prisma.FieldRef<"Course", 'CourseLevel'>
  readonly smallDescription: Prisma.FieldRef<"Course", 'String'>
  readonly slug: Prisma.FieldRef<"Course", 'String'>
  readonly status: Prisma.FieldRef<"Course", 'CourseStatus'>
  readonly category: Prisma.FieldRef<"Course", 'String'>
  readonly userId: Prisma.FieldRef<"Course", 'String'>
  readonly stripePriceId: Prisma.FieldRef<"Course", 'String'>
  readonly createdAt: Prisma.FieldRef<"Course", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Course", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Course findUnique
 */
export type CourseFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
  /**
   * Filter, which Course to fetch.
   */
  where: Prisma.CourseWhereUniqueInput
}

/**
 * Course findUniqueOrThrow
 */
export type CourseFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
  /**
   * Filter, which Course to fetch.
   */
  where: Prisma.CourseWhereUniqueInput
}

/**
 * Course findFirst
 */
export type CourseFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
  /**
   * Filter, which Course to fetch.
   */
  where?: Prisma.CourseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Courses to fetch.
   */
  orderBy?: Prisma.CourseOrderByWithRelationInput | Prisma.CourseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Courses.
   */
  cursor?: Prisma.CourseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Courses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Courses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Courses.
   */
  distinct?: Prisma.CourseScalarFieldEnum | Prisma.CourseScalarFieldEnum[]
}

/**
 * Course findFirstOrThrow
 */
export type CourseFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
  /**
   * Filter, which Course to fetch.
   */
  where?: Prisma.CourseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Courses to fetch.
   */
  orderBy?: Prisma.CourseOrderByWithRelationInput | Prisma.CourseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Courses.
   */
  cursor?: Prisma.CourseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Courses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Courses.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Courses.
   */
  distinct?: Prisma.CourseScalarFieldEnum | Prisma.CourseScalarFieldEnum[]
}

/**
 * Course findMany
 */
export type CourseFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
  /**
   * Filter, which Courses to fetch.
   */
  where?: Prisma.CourseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Courses to fetch.
   */
  orderBy?: Prisma.CourseOrderByWithRelationInput | Prisma.CourseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Courses.
   */
  cursor?: Prisma.CourseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Courses from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Courses.
   */
  skip?: number
  distinct?: Prisma.CourseScalarFieldEnum | Prisma.CourseScalarFieldEnum[]
}

/**
 * Course create
 */
export type CourseCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
  /**
   * The data needed to create a Course.
   */
  data: Prisma.XOR<Prisma.CourseCreateInput, Prisma.CourseUncheckedCreateInput>
}

/**
 * Course createMany
 */
export type CourseCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Courses.
   */
  data: Prisma.CourseCreateManyInput | Prisma.CourseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Course createManyAndReturn
 */
export type CourseCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * The data used to create many Courses.
   */
  data: Prisma.CourseCreateManyInput | Prisma.CourseCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Course update
 */
export type CourseUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
  /**
   * The data needed to update a Course.
   */
  data: Prisma.XOR<Prisma.CourseUpdateInput, Prisma.CourseUncheckedUpdateInput>
  /**
   * Choose, which Course to update.
   */
  where: Prisma.CourseWhereUniqueInput
}

/**
 * Course updateMany
 */
export type CourseUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Courses.
   */
  data: Prisma.XOR<Prisma.CourseUpdateManyMutationInput, Prisma.CourseUncheckedUpdateManyInput>
  /**
   * Filter which Courses to update
   */
  where?: Prisma.CourseWhereInput
  /**
   * Limit how many Courses to update.
   */
  limit?: number
}

/**
 * Course updateManyAndReturn
 */
export type CourseUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * The data used to update Courses.
   */
  data: Prisma.XOR<Prisma.CourseUpdateManyMutationInput, Prisma.CourseUncheckedUpdateManyInput>
  /**
   * Filter which Courses to update
   */
  where?: Prisma.CourseWhereInput
  /**
   * Limit how many Courses to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Course upsert
 */
export type CourseUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
  /**
   * The filter to search for the Course to update in case it exists.
   */
  where: Prisma.CourseWhereUniqueInput
  /**
   * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
   */
  create: Prisma.XOR<Prisma.CourseCreateInput, Prisma.CourseUncheckedCreateInput>
  /**
   * In case the Course was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CourseUpdateInput, Prisma.CourseUncheckedUpdateInput>
}

/**
 * Course delete
 */
export type CourseDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
  /**
   * Filter which Course to delete.
   */
  where: Prisma.CourseWhereUniqueInput
}

/**
 * Course deleteMany
 */
export type CourseDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Courses to delete
   */
  where?: Prisma.CourseWhereInput
  /**
   * Limit how many Courses to delete.
   */
  limit?: number
}

/**
 * Course.chapters
 */
export type Course$chaptersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chapter
   */
  select?: Prisma.ChapterSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chapter
   */
  omit?: Prisma.ChapterOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChapterInclude<ExtArgs> | null
  where?: Prisma.ChapterWhereInput
  orderBy?: Prisma.ChapterOrderByWithRelationInput | Prisma.ChapterOrderByWithRelationInput[]
  cursor?: Prisma.ChapterWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChapterScalarFieldEnum | Prisma.ChapterScalarFieldEnum[]
}

/**
 * Course.enrollments
 */
export type Course$enrollmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Enrollment
   */
  select?: Prisma.EnrollmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Enrollment
   */
  omit?: Prisma.EnrollmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EnrollmentInclude<ExtArgs> | null
  where?: Prisma.EnrollmentWhereInput
  orderBy?: Prisma.EnrollmentOrderByWithRelationInput | Prisma.EnrollmentOrderByWithRelationInput[]
  cursor?: Prisma.EnrollmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EnrollmentScalarFieldEnum | Prisma.EnrollmentScalarFieldEnum[]
}

/**
 * Course without action
 */
export type CourseDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Course
   */
  select?: Prisma.CourseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Course
   */
  omit?: Prisma.CourseOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CourseInclude<ExtArgs> | null
}
